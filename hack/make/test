#!/bin/sh

DEST=$1

set -e

# Run Docker's test suite, including sub-packages, and store their output as a bundle
# If $TESTFLAGS is set in the environment, it is passed as extra arguments to 'go test'.
# You can use this to select certain tests to run, eg.
# 
# 	TESTFLAGS='-run ^TestBuild$' ./hack/make.sh test
#
bundle_test() {
	{
		date
		for test_dir in $(find_test_dirs); do (
			set -x
			cd $test_dir
			go test -v -ldflags "$LDFLAGS" $BUILDFLAGS $TESTFLAGS
		)  done
	} 2>&1 | tee $DEST/test.log
}


# This helper function walks the current directory looking for directories
# holding Go test files, and prints their paths on standard output, one per
# line.
find_test_dirs() {
       find . -name '*_test.go' | grep -v '^./vendor' |
               { while read f; do dirname $f; done; } |
               sort -u
}


check_test_garbage() {
	nGarbage=`find /tmp/ -name 'docker-*' | wc -l`
	if [ $nGarbage -gt 0 ]; then
		(
		cat <<EOF

Error: there are $nGarbage docker-related files in /tmp. Please clean them up and try again.
--------------------------------------------------------------------------------------------
EOF
		find /tmp -name 'docker-*'
		cat <<EOF
--------------------------------------------------------------------------------------------
If the error persists, your tests might leak temporary files. This is considered a test fail.
EOF
		exit 1
		) 2>&1
	fi
}

check_test_garbage
bundle_test
check_test_garbage
